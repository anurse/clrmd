variables:
  Build.Repository.Clean: true
  
  # Variables for public PR builds
  ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest'), contains(variables['Build.DefinitionName'], 'github')) }}:
    _HelixType: build/product
    _HelixSource: pr/Microsoft/clrmd/$(Build.SourceBranch)
    EnableMicrobuild: false

  # Variables for internal Official builds
  ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), contains(variables['Build.DefinitionName'], 'official')) }}:
    _HelixType: build/product
    _HelixSource: official/Microsoft/clrmd/$(Build.SourceBranch)
    _SignType: test # Change to real once we have signing approval
    EnableMicrobuild: true
 
resources:
  containers:
  - container: LinuxContainer
    image: microsoft/dotnet-buildtools-prereqs:ubuntu-14.04-cross-0cd4667-20170319080304

trigger:
- master

# To be added in the future when VSTS supports this feature
# pr:
# - master

# Three phases for each of the three OSes we want to run on
phases:
- template: /eng/common/templates/phases/base.yml
  parameters:
    name: Windows_NT
    enableTelemetry: true
    enableMicrobuild: $(EnableMicrobuild)
    queue:
      # agent pool can't be read from a user-defined variable (Azure DevOps limitation)
      ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest'), contains(variables['Build.DefinitionName'], 'github')) }}:
        name: dotnet-external-temp
      ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), contains(variables['Build.DefinitionName'], 'official')) }}:
        name: DotNetCore-Windows
      parallel: 99
      matrix:
        debug_configuration:
          _BuildConfig: Debug
        release_configuration:
          _BuildConfig: Release
    steps:
    - script: eng\common\cibuild.cmd
        -configuration $(_BuildConfig)
        -prepareMachine
      name: Build
      displayName: Build
      condition: succeeded()
    - task: PublishTestResults@2
      displayName: Publish Test Results to VSTS
      condition: always()
      continueOnError: true
      inputs:
        testRunner: junit
        testResultsFiles: 'artifacts/TestResults/$(_BuildConfig)/*.xml'
    - task: PublishBuildArtifacts@1
      displayName: Publish Logs to VSTS
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)'
        PublishLocation: Container
        ArtifactName: $(Agent.Os)_$(Agent.JobName)
      continueOnError: true
      condition: always()
    variables:
      _HelixBuildConfig: $(_BuildConfig)

- template: /eng/common/templates/phases/base.yml
  parameters:
    name: Linux
    enableTelemetry: true
    queue:
      name: Hosted Ubuntu 1604
      parallel: 99
      container: LinuxContainer
      matrix:
        debug_configuration:
          _BuildConfig: Debug
        release_configuration:
          _BuildConfig: Release
    steps:
    - script: eng/common/cibuild.sh
        --configuration $(_BuildConfig)
        --prepareMachine
      name: Build
      displayName: Build
      condition: succeeded()
    - task: PublishTestResults@2
      displayName: Publish Test Results to VSTS
      condition: always()
      continueOnError: true
      inputs:
        testRunner: junit
        testResultsFiles: 'artifacts/TestResults/$(_BuildConfig)/*.xml'
    - task: PublishBuildArtifacts@1
      displayName: Publish Logs to VSTS
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)'
        PublishLocation: Container
        ArtifactName: $(Agent.Os)_$(Agent.JobName)
      continueOnError: true
      condition: always()
    variables:
      _HelixBuildConfig: $(_BuildConfig)